
/*
Gestion de la memoria en tiempo de ejecución
a) ¿En qué consiste la memoria de pila?
b) Describa La estructura del registro de activación de una función
c) Describa el proceso de llamada a una función 
d) Describa el proceso de retorno de una función
*/

a)
La memoria de pila está basada en una pila donde se apilan registros de activación de las diferentes funciones que se 
van llamando. El registro de activación que se encuentra en la cima de la pila pertenecerá a la función que está en 
ejecución en ese momento.

Al terminar la ejecución de la función se desapila el registro correspondiente y se devuelve el control a la 
función que se encuentra en la cima de la pila. Cada vez que se apila un registro de activación hay que almacenar el estado 
de la máquina y la dirección de comienzo de dicho registro.

Esta gestión permite manejar lenguaje estructurados que permiten realizar llamadas recursivas.


b)
El registro de activación de una función es una estructura que permite almacenar información sobre la función. 
Está dividido en dos partes: la parte de la función llamada y la parte de la función que llama.
  1) Parte de la funcion llamada: La función llamada establece en el registro de activación las variables temporales,
     las variables locales y el estado de la máquina.
  2) Parte de la función que llama: La función que llama establece la dirección de retorno, el valor de los parámetros 
     y el valor devuelto por la función.

c)
El proceso de llamada de una función consiste en 6 etapas:
  1- Almacenar el valor de los parámetros.
  2- Reservar espacio para el valor devuelto.
  3- Almacenar el valor de la dirección de retorno.
  4- Pasar el control a la función llamada.
  5- Almacenar el estado de la máquina (SP + FP) Stack Pointer y Frame Pointer.
  6- Comenzar la ejecución del código de la función llamada.

d)
El proceso de retorno de una función conste de 5 etapas:
  1- Asignar el valor devuelto.
  2- Restablecer el estado de la máquina.
  3- Restaurar el valor de la dirección de retorno.
  4- Devolver el control a la función que llama.
  5- Almacenar el valor devuelto en la variable adecuada.





/*
Describa las características y principales estrategias de gestión del montón en la memoria con reserva dinámica.
*/

La memoria con reserva dinámica, también conocida como montón, es util para la gestión de estructuras dinámicas como 
listas, árboles o grafos, y es intensamente utilizada en la programación orientada a objetos.

Las operaciones fundamentales en esta región de memoria son el alojamiento y el desalojo. 
En lenguajes orientados a procesos, malloc y free, mientras que en lenguajes orientados a objetos, new y delete. 

Existen distintas estrategias para gestionar el montón, entre ellas:

Bloques de longitud fija:
Esta técnica consiste en gestionar el montón como una lista enlazada de bloques del mismo tamaño. 
El sistema mantiene un puntero al primer bloque libre. El alojamiento se realiza asignando ese primer bloque, y el desalojo
consiste en reintegrar el bloque liberado al inicio de la lista. 
En la práctica, las peticiones de memoria son de tamaño variable, por lo que puede resultar muy ineficiente.

Montón con estructura simple:
El montón se organiza como una lista enlazada de bloques de diferentes tamaños. Cada bloque contiene 
tres campos: el tamaño del bloque, un puntero a la zona libre, y un puntero al siguiente bloque.

1) En el proceso de alojamiento, pueden aplicarse varias estrategias:

La estrategia del primer bloque consiste en recorrer la lista hasta encontrar un bloque suficientemente grande para la 
solicitud. Si es más grande que lo necesario, se divide, asignando una parte y dejando la otra como un nuevo bloque.

La estrategia del mejor bloque selecciona el bloque cuyo tamaño se ajusta mejor a la solicitud, lo cual minimiza 
desperdicio inmediato, pero suele producir una alta fragmentación.

La estrategia del peor bloque asigna el bloque más grande disponible, intentando minimizar la fragmentación futura, 
aunque a costa de perder grandes bloques útiles para futuras asignaciones grandes.

2) En el proceso de desalojo, también existen varias alternativas:

Una posibilidad es colocar el bloque liberado al principio de la lista de bloques libres, lo cual es rápido pero dificulta 
la fusión con bloques contiguos y favorece la fragmentación.

Otra opción es mantener la lista ordenada según la posición de memoria, lo que permite fusionar fácilmente bloques 
adyacentes, reduciendo la fragmentación, aunque con un mayor coste en tiempo de inserción.





/*
Memoria Dinámica (Estructura de Bloques Marcados)
*/

(a) Estructura de cada bloque

En un esquema de gestión de memoria dinámica basado en bloques marcados, cada bloque de memoria contiene 
información de control tanto al inicio como al final del mismo, es decir, está duplicada. 
Esta estructura incluye un indicador que señala si el bloque está libre o ocupado, el tamaño total del bloque, 
y punteros hacia los bloques anterior y siguiente dentro de la lista de bloques libres. 

(b) Proceso de alojamiento

Cuando un programa solicita memoria, el sistema busca en la lista de bloques libres aquel que tenga un tamaño suficiente 
para satisfacer la petición. 
Dependiendo de la política empleada (como primer ajuste, mejor ajuste o pero ajuste), se elige un bloque adecuado. 
Si el bloque encontrado es significativamente más grande que lo solicitado, se divide: una parte se asigna al proceso, 
y el resto se mantiene como bloque libre, con sus propios campos de control. 

(c) Proceso de desalojo

Cuando se libera un bloque previamente asignado, este se marca como libre y se intenta fusionar con los bloques
adyacentes si también están libres. 
Esto puede dar lugar a cuatro situaciones: 
  -  si ninguno de los bloques vecinos está libre, se agrega el bloque tal cual al inicio de la lista de bloques libres
  -  si uno de ellos está libre, se fusiona con él y se actualizan los valores de los enlaces. 
  -  si ambos lo están, se fusiona con ambos para formar un bloque más grande. Se extrae el posterior y se fusiona
     con el bloque y el anterior, poniendo los enlaces de este.


Finalmente, se actualiza la lista de bloques libres para reflejar la nueva situación tras la fusión.



/*
Memoria Dinámica (Estructura de División Fija)
*/

(a) Estructura de cada bloque

En un esquema de gestión de memoria basado en bloques de división fija según la serie de Fibonacci, la memoria se divide en 
bloques cuyo tamaño sigue esta secuencia:
– Bytes de control (C): bloque libre + tamaño + código de división
– Serie de Fibonacci: Fn = Fn-1 + Fn-2 + C
– Serie de división binaria: Fn = Fn-1 + Fn-1 + C
Cada bloque incluye información de control que indica su tamaño, su estado libre o ocupado y punteros a otros bloques del
mismo tamaño dentro una lista de bloques libres. 

(b) Proceso de alojamiento

Cuando se solicita un bloque de memoria, el sistema selecciona el tamaño más pequeño de la secuencia de Fibonacci que sea 
igual o mayor al tamaño solicitado. A continuación, busca un bloque libre de esa clase. Si no hay ninguno disponible, 
puede intentar dividir un bloque mayor en dos bloques de tamaños consecutivos en la secuencia.
Cada vez que se divide un bloque, el subbloque izquierdo tiene un control de división 0 y al subbloque derecho se le incrementa.

Una vez asignado el bloque, se marca como ocupado y se retira de la lista de bloques libres correspondiente.

(c) Proceso de desalojo

Estudiar el código de división para saber si es un bloque izquierdo (c = 0) o derecho (c > 0).
Buscar la información del bloque compañero. Si es un bloque izquierdo, el bloque compañero estará en la posición del 
bloque más el tamaño. Si es un bloque derecho, entonces proviene de una división en la que se conoce el tamaño del bloque 
izquierdo, por lo que la posición del bloque compañero será la posición del bloque menos el tamaño del compañero.
Si el bloque compañero está libre, fundir ambos bloques en el bloque original y repetir el proceso hasta que no se pueda 
agrupar más.

Actualizar los enlaces a medida que se van realizando las operaciones de liberación y agrupación.


Dado que los tamaños están predefinidos, el sistema puede organizar listas separadas para cada clase de tamaño.
Sin embargo, este mecanismo está limitado por las restricciones impuestas por la secuencia de tamaños válidos.



/*
Tipos de recolección de basura
*/

La recolección de basura es una técnica que permite liberar automáticamente la memoria dinámica, descargando al programador
de esta tarea. Es común en lenguajes como Java, Python, Prolog o Lisp, a diferencia de lenguajes como C o C++, donde la 
gestión de memoria es manual. En los lenguajes de alto nivel, esta función la realiza el compilador o el intérprete. 

La técnica de desocupación sobre la marcha (free as you go) libera la memoria de un objeto en el momento en que deja de
estar referenciado. Para ello, cada objeto mantiene un contador de referencias. Cuando este contador llega a cero, 
el objeto se libera. Aunque es simple, no puede manejar estructuras circulares y tiene un alto coste en la modificación
de punteros, por lo que su uso es limitado, salvo en lenguajes como Rust.

El método de marcado y barrido (mark-and-sweep) se realiza en dos fases. Primero se marcan todos los objetos alojados
en memoria dinámica. Luego, se recorre la memoria y se liberan los objetos no marcados. Esta técnica permite identificar 
con precisión qué objetos siguen siendo útiles, aunque puede ser costosa en tiempo de ejecución.

La recolección por copia (copying collection) divide la memoria en dos zonas: una activa y otra libre. Durante la 
recolección, los objetos accesibles se copian a la zona libre, y luego se intercambian los roles. Esto simplifica la 
gestión de memoria y permite un alojamiento secuencial, aunque requiere el doble de memoria y la actualización de todas 
las referencias a los objetos.

La recolección generacional se basa en la observación de que los objetos jóvenes tienden a morir pronto. Por ello, divide 
la memoria en generaciones y realiza la recolección con mayor frecuencia en las más jóvenes. Los objetos que sobreviven 
se trasladan a generaciones superiores. Esta técnica mejora el rendimiento al trabajar con áreas de memoria más pequeñas.

La recolección incremental busca reducir las pausas del programa principal permitiendo que el recolector trabaje en 
paralelo. Clasifica los objetos en blancos, grises y negros, y avanza mientras existan objetos grises. Cuando ya no hay, 
los blancos se consideran basura. 
Esta técnica es una versión paralela del marcado y barrido, ideal para sistemas en tiempo real.





