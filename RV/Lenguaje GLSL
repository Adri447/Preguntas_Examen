
/*
Describa el proceso de creación y uso de un programa gráfico y de los shaders que lo forman
*/

En un programa gráfico se distinguen dos partes principales:

- Las ejecutadas por la CPU, que utilizan funciones de OpenGL en C/C++.
- Las ejecutadas por la tarjeta gráfica, los shaders. Escritos en GLSL, serán cargados al programa.

Desde la parte ejecutada por la CPU, se crean los shaders con glCreateShader y se les asigna el código en modo texto
mediante la función glShaderSource. A continuación, se compilan con glCompileShader, y se debe comprobar si la compilación 
ha sido exitosa mediante glGetShaderiv. En caso de error, es posible consultar el mensaje de error con glGetShaderInfoLog.

Una vez compilados correctamente, los shaders se añaden a un programa gráfico utilizando glAttachShader. 
Este programa se crea con glCreateProgram, y al menos debe incluir un Vertex Shader y un Fragment Shader 
para que sea válido. Después de adjuntar los shaders, se procede al linkado con glLinkProgram.

Si el linkado es exitoso, el programa puede instalarse en el pipeline de renderizado mediante la función glUseProgram.
Finalmente, para liberar los recursos se eliminan los shaders con glDeleteShader y el programa gráfico con glDeleteProgram.



/*
Describa la estructura básica de un shader ¿Qué tipos de declaraciones se pueden encontrar en estos programas? 
Descríbalas brevemente. 
*/

La estructura básica de un shader en GLSL comienza con la declaración de la versión del lenguaje (#version), 
seguida de una serie de declaraciones de variables y funciones, y finaliza con la función principal void main(), 
que contiene el código que se ejecutará en la GPU.

Las principales declaraciones que pueden aparecer en un shader son:

- in (variables de entrada): Reciben datos externos al shader. En el Vertex Shader las entradas corresponden a los 
atributos de cada vértice, y en el Fragment Shader las entradas corresponden a los atributos de cada pixel, 
calculados mediante interpolación de las salidas del Vertex_Shader.

- out (variables de salida): Son los resultados que el shader devuelve. Las salidas del Vertex_Shader corresponden
a las entradas del Fragment_Shader, y este último devuelve el color final del píxel.

- uniform: Son variables constantes durante toda la ejecución del shader. Se usan para enviar datos globales, 
como matrices de transformación o parámetros de iluminación.

- Funciones auxiliares: Se declaran como en C y ayudan a estructurar el código. Pueden ser llamadas desde el main().

- subroutine: Permiten definir interfaces de funciones y simulan punteros a funciones, útiles para cambiar
comportamientos sin recompilar.

El bloque main() debe asignar las salidas y puede utilizar las variables declaradas, así como funciones propias 
o predefinidas por GLSL.




/*
¿Qué es un Vertex Buffer Object? ¿Y un Vertex Array Object? Describa la forma de crearlos y configurarlos
*/

- Vertex Buffer Object
Un VBO es una estructura de datos que puede almacenar en la memoria de la GPU diferentes
tipos de información, según qué tipo de buffer se le asigna al activarlo como, por ejemplo:
almacenar atributos de los vértices o almacenar una lista de índices a vértices.

Se crean, desde el código para la CPU, a través de la función glGenBuffers, donde se le pasa el
número de buffers a crear y los identificadores de los buffers. Ya creado un VBO, para poder
utilizarlo es necesario activarlo con la función glBindBuffer, donde se le indica qué tipo de
buffer será. Por último, para almacenar los datos se utiliza la función glBufferData, indicándole
el tipo de buffer a llenar y dónde están los datos que va a guardar.

- Vertex Array Object
Cuando ya estén creados los VBOs y almacenados los datos de los vértices, el siguiente paso es
crear los Vertex Array Objects. Éstos son estructuras de datos que definen el mapeo entre los
atributos (almacenados en los VBOs) y los nombres de las entradas de los shaders.
A través de la función glGenVertexArrays podemos crear un cierto número de VAOs y obtener
sus identificadores. Para usar un VAO, se activa primero con la función glBindVertexArray.
Para definir un atributo perteneciente a un VAO se usa la función glVertexAttribPointer,
indicándole el índice, cuantos datos habrá por atributo y el tipo que será.
Para asignar la posición de una variable de entrada, se utiliza la función glBindAttribLocation,
indicándole el shader, la posición del atributo y el nombre de la variable


/*
Describa como se utilizan los operadores aritméticos de suma, resta, producto y división sobre 
los tipos de datos vectoriales y matriciales en el lenguaje GLSL.
*/



/*
Describa cuales son los tipos de datos utilizados en el lenguaje GLSL. 
*/

El lenguaje GLSL incluye varios tipos de datos diseñados para facilitar el trabajo gráfico en la GPU. 
Estos se dividen en diferentes categorías:

1) Tipos básicos:

void: usado en funciones que no devuelven valor.
bool: valores lógicos (true o false).
int: enteros con signo de 32 bits.
uint: enteros sin signo de 32 bits (ej: 100u).
float: números en coma flotante de 32 bits.
double: números en coma flotante de 64 bits (ej: 0.5LF).

2) Tipos vectoriales:
Representan vectores de 2, 3 o 4 componentes:
vec2, vec3, vec4 para float
ivec, uvec, bvec, dvec para int, uint, bool y double respectivamente
Se puede acceder a sus componentes con x, y, z, w | r, g, b, a | s,t,p,q.

3) Tipos matriciales:
Usados para transformaciones, pueden ser cuadradas (mat2, mat3, mat4) o rectangulares (mat2x3, mat4x2, etc.), 
en versiones de float y double.

4) Arrays:
Se pueden declarar arrays de cualquier tipo.

5) Estructuras:
Permiten agrupar diferentes variables bajo un mismo tipo. Ejemplo:

6) Tipos opacos:
Usados para manejar objetos gráficos complejos como texturas (sampler2D, samplerCube) e imágenes (image2D). 
No se accede a sus datos directamente, sino mediante funciones específicas.
