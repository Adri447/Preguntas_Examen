

/*
Describa el modelo de iluminación de Phong. ¿Cuántos tipos de luz utiliza? 
¿Como se calcula el efecto de cada tipo de luz?
*/

El modelo de iluminación de Phong simula cómo la luz interactúa con una superficie y calcula el color de cada píxel 
directamente en el Fragment Shader, interpolando propiedades como la normal y la posición. Aunque resulta más costoso, se
consiguen mejores resultados de coloreado.

Este modelo considera tres tipos de luz. El color final de cada punto de un objeto se calcula como la suma de los 
efectos de color de cada tipo de luz:

- Luz ambiental: Proviene de todas direcciones y se dispersa uniformemente.
El efecto es el producto de la luz ambiental por el color del material ante la luz ambiental.
Ca = La * Ma

- Luz difusa: Proviene de una dirección concreta. Su intensidad depende del ángulo entre la luz y la normal.
El efecto es el producto de la luz difusa por el color del material ante esa luz, multiplicados por un factor de incidencia, 
siendo el coseno del ángulo formado por la dirección de la luz y el vector normal de la superficie.
Cd = Ld * Md * cos(ç)

- Luz especular: Representa brillos. Depende del ángulo entre el vector reflejado de la luz y el vector hacia el observador.
El efecto es el producto de la luz especular por el color del material con esa luz, multiplicados por un factor especular. 
Este factor se calcula como el coseno del ángulo entre el vector posición del observador y el vector reflexión de la luz,
elevado a un coeficiente de brillo.
Cs = Ls * Ms * (cos(ç))^s
 
El color final se calcula como la suma de las tres contribuciones:
Cf = Ca + Cd + Cs




/*
Describa algunas formas de optimizar el modelo de iluminación de Phong.
*/

Dado que el modelo de Phong es más costoso computacionalmente al calcularse por píxel, existen diversas formas de 
optimizarlo. 
Una primera optimización es el uso del modelo non-local viewer, donde se considera que el observador está alejado. 
Esto permite fijar el vector de visión a (0,0,1), evitando su cálculo en cada fragmento y simplificando las operaciones.

Otra optimización es asumir que la dirección de la luz es un vector unitario, lo cual permite evitar su normalización, 
lo que ahorra operaciones en el shader. 

También se puede emplear el modelo de Blinn, conocido como halfway vector, que consiste en sustituir la expresión (r·v)
en el término especular por la expresión (h·n), donde el vector h se calcula como v+s. De esta forma se evita el cálculo 
de r y su normalización.

Finalmente, se puede considerar que el foco de luz no está en el infinito sino en una posición determinada, Lpos.
En este caso, el vector de incidencia de la luz sobre el punto (-s) se puede calcular como la diferencia entre la 
posición de la luz y la posición del punto, Vpos: 
-s = normalize(Lpos-Vpos).


// Sustituir esto:
vec4 s4 = ViewMatrix * vec4(Light.Ldir, 0.0);
vec3 s = normalize(-vec3(s4));

// Por esto (nueva forma con luz puntual):
vec3 s = normalize(vec3(ViewMatrix * vec4(Light.Ldir - Position, 0.0)));
o
vec3 s = normalize(vec3(Light.Lpos - Position));




/*
Desarrolle el código del VertexShader y del FragmentShader que implementan el modelo de iluminación de Phong.
*/

- VertexShader:
#version 400

layout(location = 0) in vec3 VertexPosition;
layout(location = 1) in vec3 VertexNormal;

uniform mat4 MVP;
uniform mat4 ModelViewMatrix;

out vec3 Position;
out vec3 Normal;

void main() {
  vec4 n4 = ModelViewMatrix*vec4(VertexNormal,0.0);
  vec4 v4 = ModelViewMatrix*vec4(VertexPosition,1.0);
  Normal = vec3(n4);
  Position = vec3(v4);
  gl_Position = MVP * vec4( VertexPosition, 1.0);
}


- FragmentShader:
#version 400

in vec3 Position;
in vec3 Normal;

uniform mat4 ViewMatrix;

struct LightInfo {
  vec3 Ldir; vec3 La; vec3 Ld; vec3 Ls;
};
uniform LightInfo Light;

struct MaterialInfo{
  vec3 Ka; vec3 Kd; vec3 Ks; float Shininess;
};
uniform MaterialInfo Material;

out vec4 FragColor;

vec3 ads() {
  vec4 s4 = ViewMatrix*vec4(Light.Ldir,0.0);
  vec3 n = normalize(Normal);
  vec3 v = normalize(-Position);
  vec3 s = normalize(-vec3(s4));
  vec3 r = reflect(-s,n);
  float dRate = max(dot(s,n), 0.0);
  float sRate = pow(max(dot(r,v),0.0), Material.Shininess);

  vec3 ambient = Light.La * Material.Ka;
  vec3 difusse = Light.Ld * Material.Kd * dRate;
  vec3 specular = Light.Ls * Material.Ks * sRate;

  return ambient + difusse + specular;
}

void main()
{
  vec3 Color = ads();
  FragColor = vec4(Color, 1.0);
}



