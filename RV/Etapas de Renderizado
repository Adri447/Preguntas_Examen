


/*
Describa brevemente las etapas del proceso de renderizado utilizado en OpenGL. (Un párrafo de 5 lineas para cada etapa)
*/

Etapas del proceso de renderizado:
- VertexShader:
Esta etapa es la primera del pipeline programable y se ejecuta individualmente sobre cada vértice. Su función principal es
transformar la posición del vértice desde el sistema de coordenadas del modelo hasta el espacio de coordenadas de clip.
Utiliza como entrada atributos como posición, normales y coordenadas de textura. Como salida, devuelve vértices 
transformados listos para ensamblarse en primitivas. Además, puede generar datos auxiliares a través de transform feedback.


- Ensamblado de primitivas: 
Es una etapa etapa no programable del pipeline. Recibe la indicación de las primitivas a dibujar y los atributos de los 
vértices que las forman, generados por el VertexShader. De este modo, organiza los vértices transformados en primitivas 
gráficas como puntos, líneas, triángulos, etc. Es crucial para definir la estructura básica de lo que se renderiza.


- Teselado: 
Es una etapa opcional que recibe los datos de un parche y genera nuevas primitivas. Se divide en:
    Control de teselado (TCS): recibe los vértices del patch y genera los valores de los
      vértices de las primitivas que se crearán.
    Generación de primitivas (TPG): genera las primitivas en un espacio de coordenadas
      llamado espacio de parámetros, sus coordenadas se denominan u y v, que van de 0 a 1.
    Evaluación de teselado (TES): transforma las coordenadas del espacio de parámetros
      a coordenadas de posición de los vértices (clip).


- GeometryShader: 
Es una etapa opcional. Recibe primitivas ya ensambladas y permite realizar modificaciones, incluyendo la generación de 
nuevas primitivas. Las primitivas de salida pueden ser puntos, líneas o triángulos. Además, la información 
“adyacente” debe tratarse dentro de este shader. Esta etapa puede duplicar primitivas, crear primitivas nuevas y dirigir
primitivas a distintos layers, por ejemplo.


- Rasterización e interpolación: es una etapa no programable. Estudia qué vértices quedan
dentro del clipping volumen, desechando aquellos que estén fuera, y adaptando las
primitivas que estén parcialmente fuera a través de nuevos vértices. Después, se identifican
qué pixeles forman parte de la primitiva a dibujar según la ubicación del centro del píxel.
• Entrada: primitives.
• Salida: fragments


- FragmentShader:
Etapa programable y no opcional. Se ejecuta por cada fragmento, es decir, por cada pixel de cada primitiva.
Recibe los valores interpolados para el píxel, como color, normales o coordenadas de textura. Su función es calcular el 
color final del fragmento, teniendo en cuenta iluminación, texturas y otros efectos visuales. Genera como salida el color 
asociado al píxel.


- Operaciones de raster: Etapa no programable que combina los diferentes fragmentos para generar la versión final de la 
imagen. Algunos de los procesos incluidos en esta etapa pueden ser ejecutados antes del FragmentShader por motivos de 
eficiencia. Se aplican pruebas como el test de profundidad, el test de stencil y el blending para mezclar colores 
de manera adecuada.
El proceso de renderizado genera al final el contenido de la imagen en una estructura que conoceremos como Color Buffer.




/*
Describa la etapa de “Rasterización e interpolación” que forma parte del proceso de renderizado. 
¿Qué funciones se realizan en esta etapa? Describa brevemente como se desarrollan estas funciones
*/




/*
Se conoce como “Operaciones de raster” a las funciones realizadas en la última etapa del renderizado. 
Indique cuales son estas operaciones y descríbalas brevemente.
*/

Las operaciones de raster son funciones no programables que se ejecutan en la última etapa del renderizado en OpenGL.
Su objetivo es decidir qué fragmentos se convierten en píxeles visibles en la imagen final y optimizar el rendimiento.

Entre ellas está el pixel ownership test, que verifica si un píxel pertenece a la ventana activa de OpenGL.
El scissor test define una región rectangular dentro de la cual se permite el renderizado. 
El stencil test compara valores con el stencil buffer para decidir si un fragmento debe dibujarse o no.
El depth test se encarga de comprobar si un fragmento está frente a otros ya dibujados, y solo se muestra si está más cerca 
del observador. 
Finalmente, el blending mezcla el color del fragmento con el del píxel existente según su nivel de transparencia, 
permitiendo representar efectos como objetos translúcidos.




/*
Shaders
*/

Vertex Shader
Es la primera etapa del proceso de renderizado. Se ejecuta sobre cada vértice por separado
utilizando atributos de entrada asociados al vértice como la posición, la normal, coordenadas
de textura, etc. También puede utilizar variables uniformes para compartir valores de entrada
comunes a todos los vértices.
Tiene además dos entradas predefinidas que indican el índice del vértice en los arrays de
atributos y el número de instancia del vértice, por defecto es 0.
Genera como salida, al menos, la posición del vértice en coordenadas normalizadas (clip).
Puede generar también otros valores que se quieran utilizar en siguientes etapas.

Ejemplo de Vertex Shader que transforma la posición del vértice a coordenadas clip:
#version 400
in vec3 Pos;
uniform mat4 MVP;
void main() {
    gl_position = MVP * vec4(Pos, 1.0);
}

Fragment Shader
Se ejecuta por cada píxel dentro de la primitiva, recibiendo los valores interpolados para el píxel
y genera el color asociado al píxel.
Sus entradas predefinidas serían:
- Las coordenadas del píxel.
- El índice de la primitiva que está asociada al píxel.
- Una variable que indica si la primitiva está generada en su cara frontal o en su cara trasera.

Una salida que tiene ya definida es la profundidad asociada al píxel, que se almacenará en el
buffer de profundidad.
Aunque el objetivo principal de este shader sea calcular el color del píxel, no existe una variable
de salida predefina para este dato, por lo que se toma como salida definida para el color aquella
salida que esté definida en la posición 0.

Ejemplo de Fragment Shader que dibuja de color rojo todos los píxeles de la primitiva:
#version 400
out vec4 Color;
void main() {
    Color = vec4(1.0, 0.0, 0.0, 1.0);
}





/*
Dentro del Pipeline de renderizado, la etapa de ensamblado de primitivas se lanza por medio
de los comandos glDraw...(). ¿Cuáles son las diferentes primitivas geométricas incluidas en
OpenGL? ¿Cómo se distingue la cara frontal de la cara posterior de los polígonos?
*/


Las primitivas incluidas en OpenGL son:
- Punto, compuesto por un único vértice.
- Línea, que une dos vértices.
- Triángulo, formado por tres vértices. Es la forma de primitiva más utilizada.
- Parche. No tienen un significado geométrico definido. Es un tipo especial de primitiva que se utiliza en los shaders de 
teselado, donde se convierte la información del parche en un conjunto de primitivas geométricas.
- Adyacencia:son un tipo especial de primitivas que, además de incluir los vértices principales de una figura, 
también contienen información sobre los vértices vecinos o adyacentes. 

Salvo las primitivas de tipo parche, que se usan en la etapa de teselado, y las primitivas de adyacencia, que se tratan 
en el shader de geometría, todas pueden ser tratadas directamente por el Fragment Shader.

Para distinguir entre la cara frontal y posterior de una primitiva, se obtiene el vector normal de
la primitiva. Este es un vector perpendicular a la superficie de la primitiva, y si su dirección en
el eje z es positiva, entonces el triángulo está viéndose desde su cara frontal, si es negativa,
desde su cara posterior.
De forma más simple, la cara que se ve es la frontal si los vértices que componen la primitiva,
en el momento de representarse, siguen un recorrido en sentido antihorario.
